using MLAgents;
using UnityEngine;

public class SurfAgent : Agent {
	private SurfAcademy myAcademy;
	private Fragsurf.Movement.SurfCharacter surfComp;

	private RayPerceptionSurf rayPer;

	float[] frontA = { 55, 65, 75, 105, 115, 125 }; //x6
	float[] frontB = { 35, 40, 90, 130, 145 }; //x5
	float[] down = {-135, -90, -45, -0, 45, 90, 135, 180 }; //x8

	float nr = 0, v = 0, fDT = 0.0002f;

	public Vector3[] entrances;
	public LayerMask layerMask;

	public override void InitializeAgent () {
		surfComp = transform.parent.GetComponent<Fragsurf.Movement.SurfCharacter> ();
		surfComp.rewardAction = AddReward;
		surfComp.fallInCage = () => {
			AddReward(-.15f);
			//AddReward (-1f);
			//Done ();
			//SetReward(-1f);
		};

		myAcademy = FindObjectOfType<SurfAcademy> ();
		rayPer = GetComponent<RayPerceptionSurf> ();

		for (int i = 0; i < frontB.Length; i++) {
			frontA[i] += 90;
			frontB[i] += 90;
		}
		frontA[5] += 90;
		GameObject[] teleports = GameObject.FindGameObjectsWithTag ("banana");
		entrances = new Vector3[teleports.Length];
		for (int i = 0; i < teleports.Length; i++)
			entrances[i] = teleports[i].transform.position;

		fDT = Time.fixedDeltaTime * 0.0012f; //Mathf.Pow (Time.fixedDeltaTime, 5); //

		layerMask = LayerMask.GetMask (new string[] { "SURFABLE" });
		Respawn ();
	}

	public override void CollectObservations () {

		const float rayDistance = 100;
		/* float[] rayAngles = { 20f, 90f, 160f, 45f, 135f, 70f, 110f };
		float[] rayAngles1 = { 25f, 95f, 165f, 50f, 140f, 75f, 115f };
		float[] rayAngles2 = {-30, -60, -90, -120, -150, -180, 105f }; */

		string[] detectableObjects = { "surfable", "wall", "ground" }; //, "respawnzone", "teleport"};
		AddVectorObs (rayPer.Perceive (75, frontA, detectableObjects, 0, 0)); //48
		AddVectorObs (rayPer.Perceive (75, frontA, detectableObjects, 0f, -10f)); //48
		AddVectorObs (rayPer.Perceive (75, frontA, detectableObjects, 0f, 10f)); //48
		AddVectorObs (rayPer.Perceive (75, frontA, detectableObjects, 0f, -20f)); //48
		AddVectorObs (rayPer.Perceive (rayDistance, frontB, detectableObjects, 0f, -25f)); //40
		AddVectorObs (rayPer.Perceive (rayDistance, frontB, detectableObjects, 0f, 25f)); //40
		AddVectorObs (rayPer.Perceive (120, down, detectableObjects, 0f, 55)); //8*(3+5) = 64
		AddVectorObs (surfComp.MoveData.Velocity); //x3
		AddVectorObs (transform.rotation); //x4
		AddVectorObs (surfComp._controller.Grounded); //x1

		//Vector3 tppos = transform.parent.position;

		//System.Array.Sort (entrances, delegate (Vector3 a, Vector3 b) { return Vector3.Distance (tppos, a).CompareTo (Vector3.Distance (tppos, b)); });
		//AddVectorObs (Vector3.Distance (tppos, entrances[0])); //x1
		//AddVectorObs (Quaternion.LookRotation (entrances[0] - tppos, Vector3.up)); //x4
		//AddVectorObs (surfComp.MoveData.Velocity.sqrMagnitude * .01f); //x1

		/* 		if (text) {
					text.text += "\n" + (surfComp.MoveData.Velocity) + "\n";
					text.text += surfComp._controller.Grounded + "\n";

					//text.text += (surfComp.MoveData.Velocity.sqrMagnitude / 0.1f) + "\n";
				} */

		/* 		if (Application.isEditor)
					Debug.DrawLine (tppos, entrances[0], Color.magenta); */

		//To get distance & direction to teleports + distance from respawnzone plane // Closest (3 teleports + closest 1 respawnzone) 
		//48+80+96+64+5 = 245 + 48

	}

	//[SerializeField] UnityEngine.UI.Text text;
	/* public override void AgentAction (float[] vectorAction, string textAction, MLAgents.CommunicatorObjects.CustomAction customAction) {
		if (text)
			text.text = "move: " + customAction.Direction + "\nx: " + customAction.XAmount + "\ny: " + customAction.YAmount + "\nv-act: " + vectorAction[0];

		
			//Fwd=0; FwdLEFT=1; FwdRIGHT=2; BACKWD=3; BACKWDLEFT=4; BACKWDRIGHT=5; LEFT=6; RIGHT=7; JUMPFwd=8;
			//JUMPFwdLEFT=9; JUMPFwdRIGHT=10; JUMPBACKWD=11; JUMPBACKWDLEFT=12; JUMPBACKWDRIGHT=13; JUMPLEFT=14; JUMPRIGHT=15; JUMP=16;
		
		switch (customAction.Direction) {
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Fwd:
				surfComp.UpdateMoveData (true, false, false, false, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Fwdleft:
				surfComp.UpdateMoveData (true, false, true, false, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Fwdright:
				surfComp.UpdateMoveData (true, false, false, true, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Backwd:
				surfComp.UpdateMoveData (false, true, false, false, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Backwdleft:
				surfComp.UpdateMoveData (false, true, true, false, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Backwdright:
				surfComp.UpdateMoveData (false, true, false, true, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Left:
				surfComp.UpdateMoveData (false, false, true, false, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Right:
				surfComp.UpdateMoveData (false, false, false, true, false);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpfwd:
				surfComp.UpdateMoveData (true, false, false, false, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpfwdleft:
				surfComp.UpdateMoveData (true, false, true, false, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpfwdright:
				surfComp.UpdateMoveData (true, false, false, true, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpbackwd:
				surfComp.UpdateMoveData (false, true, false, false, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpbackwdleft:
				surfComp.UpdateMoveData (false, true, true, false, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpbackwdright:
				surfComp.UpdateMoveData (false, true, false, true, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpleft:
				surfComp.UpdateMoveData (false, false, true, false, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jumpright:
				surfComp.UpdateMoveData (false, false, false, true, true);
				break;
			case MLAgents.CommunicatorObjects.CustomAction.Types.Direction.Jump:
				surfComp.UpdateMoveData (false, false, false, false, true);
				break;
			default:
				surfComp.UpdateMoveData (false, false, false, false, false);
				break;

		}

		surfComp.UpdateRotation (customAction.XAmount, customAction.YAmount);
	} */
	public override void AgentAction (float[] vectorAction, string textAction) {

		bool moveFwd = vectorAction[0] > 0.33f;
		bool moveBack = vectorAction[0] < -0.33f;
		bool moveLeft = vectorAction[1] > 0.33f;
		bool moveRight = vectorAction[1] < -0.33f;
		float xAxis = vectorAction[2];
		float yAxis = vectorAction[3];
		bool jump = vectorAction[4] > 0.5f;

		/* if (text) {
			text.text = "moveFwd: " + moveFwd + "\n";
			text.text += "moveBack: " + moveBack + "\n";
			text.text += "moveLeft: " + moveLeft + "\n";
			text.text += "moveRight: " + moveRight + "\n";
			text.text += "jump: " + jump + "\n";
			text.text += "x: " + xAxis + "\n";
			text.text += "y: " + yAxis + "\n";
		} */

		v = Mathf.Abs (surfComp.MoveData.Velocity.x) + Mathf.Abs (surfComp.MoveData.Velocity.z); // + Mathf.Abs (Vector3.Cross (Vector3.up, transform.forward).magnitude);


		float lookAngle = surfComp.MoveData.Velocity != Vector3.zero ? Quaternion.Angle (Quaternion.LookRotation (surfComp.MoveData.Velocity, Vector3.up), transform.rotation) : 0;
		float lookPenalty = (lookAngle < 25) ? 0 : Mathf.Log10 (Mathf.Abs (lookAngle));
		if (v > 20 && !surfComp._controller.Grounded && Physics.Raycast (transform.parent.position, Vector3.down, 2f, layerMask)) { // surfing
			AddReward (fDT * Mathf.Log (v));
		} else if (surfComp._controller.Grounded) {
			AddReward (-fDT * 0.4f);
		}else if (surfComp.MoveData.Velocity.y > 10 && !jump){//Flying
			AddReward(fDT * Mathf.Log(surfComp.MoveData.Velocity.y - 9));
		}
		if (lookPenalty > 0)
			AddReward (fDT * -(1 + lookPenalty));
		 
		/*
		if (!surfComp._controller.Grounded) {
			float d = Mathf.Pow(fDT, 4) * 0.0002f * );
			Vector3 vel = surfComp.MoveData.Velocity;
			if (vel.y > 0) AddReward (v * (1 + vel.y));
			else AddReward (((v > 1.5f)) ? Time.deltaTime * v : Time.deltaTime * vel.y); }
		*/

		if (jump && surfComp._controller.Grounded == false)
			AddReward (-fDT * 10);

		nr = vectorAction[0] * vectorAction[0];
		nr += vectorAction[1] * vectorAction[1];
		nr += 2 * vectorAction[2] * vectorAction[2];
		nr += 2 * vectorAction[3] * vectorAction[3];

		AddReward ((-nr * fDT));

		surfComp.UpdateMoveData (moveFwd, moveBack, moveLeft, moveRight, jump);
		surfComp.UpdateRotation (xAxis * 5, yAxis * 5);
	}

	Rand random = new Rand ();
	void Respawn () {
		Transform to = GameObject.Find ("CageSpawn").transform;
		if (to.childCount > 1)
			surfComp.SpawnAt (to.GetChild (random.Next (to.childCount)).position);
		else
			surfComp.SpawnAt (to.position);
	}
	public override void AgentReset () {
		Respawn ();
		//ResetReward();
	}
}
//T3